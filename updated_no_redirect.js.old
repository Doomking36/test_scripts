// ==UserScript==
// @name         Link Redirect Confirmation (External Links Only)
// @namespace    http://tampermonkey.net/
// @version      1.5
// @description  Creates a popup window for confirmation when redirecting to external links, with improved handling of long URLs
// @match        *://*/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // List of trusted domains (no confirmation needed when navigating between these)
    const trustedDomains = ['youtube.com', 'google.com', 'reddit.com'];

    // Function to check if a URL is external or untrusted
    function isExternalOrUntrustedLink(url) {
        const currentDomain = window.location.hostname;
        const linkDomain = new URL(url).hostname;
        
        if (currentDomain !== linkDomain) {
            return !trustedDomains.some(domain => linkDomain.includes(domain));
        }
        
        return false;
    }

    // Function to truncate URL for display
    function truncateUrl(url, maxLength = 50) {
        if (url.length <= maxLength) return url;
        const parsedUrl = new URL(url);
        const domain = parsedUrl.hostname;
        const path = parsedUrl.pathname + parsedUrl.search + parsedUrl.hash;
        const truncatedPath = path.length > maxLength - domain.length - 4 
            ? path.substr(0, maxLength - domain.length - 4) + '...' 
            : path;
        return domain + truncatedPath;
    }

    // Function to create and show the confirmation popup
    function showConfirmationPopup(url) {
        const popup = document.createElement('div');
        popup.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: white;
            border: 2px solid #ccc;
            padding: 20px;
            z-index: 9999;
            box-shadow: 0 0 10px rgba(0,0,0,0.5);
            max-width: 80%;
            max-height: 80%;
            overflow-y: auto;
            word-wrap: break-word;
        `;

        const truncatedUrl = truncateUrl(url);
        const fullUrlElement = `<div style="font-size: 0.8em; margin-top: 10px; overflow-wrap: break-word;">${url}</div>`;

        popup.innerHTML = `
            <p>This page is trying to redirect you to an external site:</p>
            <p><strong>${truncatedUrl}</strong></p>
            ${truncatedUrl !== url ? fullUrlElement : ''}
            <p>Do you want to proceed?</p>
            <div style="text-align: center;">
                <button id="confirmRedirect" style="margin-right: 10px;">Yes</button>
                <button id="cancelRedirect">No</button>
            </div>
        `;

        document.body.appendChild(popup);

        return new Promise((resolve) => {
            document.getElementById('confirmRedirect').addEventListener('click', () => {
                document.body.removeChild(popup);
                resolve(true);
            });

            document.getElementById('cancelRedirect').addEventListener('click', () => {
                document.body.removeChild(popup);
                resolve(false);
            });
        });
    }

    // Intercept link clicks
    document.addEventListener('click', async function(e) {
        const link = e.target.closest('a');
        if (link && isExternalOrUntrustedLink(link.href)) {
            e.preventDefault();
            e.stopPropagation();

            const confirmed = await showConfirmationPopup(link.href);
            if (confirmed) {
                window.location.href = link.href;
            }
        }
    }, true);

    // Intercept form submissions
    document.addEventListener('submit', async function(e) {
        const form = e.target;
        if (isExternalOrUntrustedLink(form.action)) {
            e.preventDefault();
            e.stopPropagation();

            const confirmed = await showConfirmationPopup(form.action);
            if (confirmed) {
                form.submit();
            }
        }
    }, true);

    // Intercept window.location changes
    const originalAssign = window.location.assign;
    window.location.assign = async function(url) {
        if (isExternalOrUntrustedLink(url)) {
            const confirmed = await showConfirmationPopup(url);
            if (confirmed) {
                originalAssign.call(window.location, url);
            }
        } else {
            originalAssign.call(window.location, url);
        }
    };

    const originalReplace = window.location.replace;
    window.location.replace = async function(url) {
        if (isExternalOrUntrustedLink(url)) {
            const confirmed = await showConfirmationPopup(url);
            if (confirmed) {
                originalReplace.call(window.location, url);
            }
        } else {
            originalReplace.call(window.location, url);
        }
    };

    // Intercept window.open
    const originalOpen = window.open;
    window.open = async function(url, name, features) {
        if (isExternalOrUntrustedLink(url)) {
            const confirmed = await showConfirmationPopup(url);
            if (confirmed) {
                return originalOpen.call(window, url, name, features);
            }
        } else {
            return originalOpen.call(window, url, name, features);
        }
    };

    // Intercept location changes via history API
    const originalPushState = history.pushState;
    history.pushState = function(state, title, url) {
        if (isExternalOrUntrustedLink(url)) {
            showConfirmationPopup(url).then(confirmed => {
                if (confirmed) {
                    originalPushState.call(history, state, title, url);
                }
            });
        } else {
            originalPushState.call(history, state, title, url);
        }
    };

    const originalReplaceState = history.replaceState;
    history.replaceState = function(state, title, url) {
        if (isExternalOrUntrustedLink(url)) {
            showConfirmationPopup(url).then(confirmed => {
                if (confirmed) {
                    originalReplaceState.call(history, state, title, url);
                }
            });
        } else {
            originalReplaceState.call(history, state, title, url);
        }
    };
})();

